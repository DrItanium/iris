/**
 * Contains all of the defined properties for different instructions, defining it implies
 * that it is true
 */

// DeclareProperty(InstructionName, PropertyName) 

#define PartOfClass(op, class) DeclareProperty(op, Is ## class ## Operation)
#define OfGroup(group, op) DeclareProperty(group ## op, Is ## group ## Operation)
#define GroupArithmetic(op) OfGroup(Arithmetic, op)
#define GroupCompare(op) OfGroup(Compare, op)
#define GroupBranch(op) OfGroup(Branch, op)
#define GroupMemory(op) OfGroup(Memory, op)
#define GroupLogical(op) OfGroup(Logical, op)
#define Memory(op, prop) \
    DeclareProperty(Memory ## op, prop) \
    GroupMemory(op)
#define Stack(op) Memory(Stack ## op, IsStackOperation)
#define Code(op) Memory(Code ## op, IsCodeOperation)
#define Data(op) Memory(Data ## op, IsDataOperation)
#define IO(op) Memory(IO ## op, IsIOOperation)
#define IP(op) Memory(op, ManipulatesIP)
Stack(Push)
Stack(PushImmediateValue)
Stack(Pop)
PartOfClass(MemoryStackPush, Push)
PartOfClass(MemoryStackPushImmediateValue, Push)
PartOfClass(MemoryStackPop, Pop)
Code(LoadWithOffset)
PartOfClass(MemoryCodeLoadWithOffset, Load)
Code(StoreWithOffset)
PartOfClass(MemoryCodeStoreWithOffset, Store)
Data(LoadWithOffset)
PartOfClass(MemoryDataLoadWithOffset, Load)
Data(StoreWithOffset)
PartOfClass(MemoryDataStoreWithOffset, Store)
Data(StoreImmediateValue)
PartOfClass(MemoryDataStoreImmediateValue, StoreImmediate)
IO(LoadWithOffset)
PartOfClass(MemoryIOLoadWithOffset, Load)
IO(StoreWithOffset)
PartOfClass(MemoryIOStoreWithOffset, Store)
IO(StoreImmediateValue)
PartOfClass(MemoryIOStoreImmediateValue, StoreImmediate)
IP(MoveToIP)
PartOfClass(MemoryMoveToIP, MoveToIP)
IP(MoveFromIP)
PartOfClass(MemoryMoveFromIP, MoveFromIP)
GroupMemory(CopyRegister)
PartOfClass(MemoryCopyRegister, GPRManipulator)
PartOfClass(MemoryCopyRegister, CopyRegister)
GroupMemory(SwapRegisters)
PartOfClass(MemorySwapRegisters, GPRManipulator)
PartOfClass(MemorySwapRegisters, SwapRegisters)
GroupMemory(AssignRegisterImmediate)
PartOfClass(MemoryAssignRegisterImmediate, GPRManipulator)
PartOfClass(MemoryAssignRegisterImmediate, AssignRegisterImmediate)
GroupBranch(ConditionalImmediate)
GroupBranch(ConditionalRelativeImmediate)
GroupBranch(RelativeImmediateAndLink)
GroupBranch(ConditionalRegister)
GroupBranch(RegisterAndLink)
GroupBranch(ImmediateAndLink)
GroupBranch(ConditionalRegisterAndLink)
GroupBranch(Select)
DeclareProperty(BranchRelativeImmediateAndLink, IsBranchImmediateInstruction)
DeclareProperty(BranchImmediateAndLink, IsBranchImmediateInstruction)
DeclareProperty(BranchRelativeImmediateAndLink, UsesRelativeOffset)
DeclareProperty(BranchRelativeImmediateAndLink, UsesLinkRegister)
DeclareProperty(BranchImmediateAndLink, UsesLinkRegister)
DeclareProperty(ArithmeticRemainderSigned, DisallowsDivideByZero)
DeclareProperty(ArithmeticRemainderUnsigned, DisallowsDivideByZero)
DeclareProperty(ArithmeticDivideSigned, DisallowsDivideByZero)
DeclareProperty(ArithmeticDivideUnsigned, DisallowsDivideByZero)
#define ArithmeticUnsigned(op) \
        GroupArithmetic(op ## Unsigned) \
        PartOfClass(Arithmetic ## op ## Unsigned, Ordinal)

#define ArithmeticSigned(op) \
        GroupArithmetic(op ## Signed) \
        PartOfClass(Arithmetic ## op ## Signed, Integer)
    
#define ArithmeticSignedUnsigned(op) \
        ArithmeticUnsigned(op) \
        ArithmeticSigned(op) \
        PartOfClass(Arithmetic ## op ## Signed, op) \
        PartOfClass(Arithmetic ## op ## Unsigned, op)
        

ArithmeticSignedUnsigned(Add)
ArithmeticSignedUnsigned(Subtract)
ArithmeticSignedUnsigned(Multiply)
ArithmeticSignedUnsigned(Divide)
ArithmeticSignedUnsigned(Remainder)
ArithmeticSignedUnsigned(Max)
ArithmeticSignedUnsigned(Min)
ArithmeticSignedUnsigned(ShiftLeft)
ArithmeticSignedUnsigned(ShiftRight)
#define Logical(op) \
        GroupLogical(op) \
        PartOfClass(Logical ## op , op)
Logical(BitwiseOr)
Logical(BitwiseAnd)
Logical(BitwiseNot)
Logical(BitwiseXor)
#define CompareUnsigned(op) \
        GroupCompare(op ## Unsigned) \
        PartOfClass(Compare ## op ## Unsigned, Ordinal)

#define CompareSigned(op) \
        GroupCompare(op ## Signed) \
        PartOfClass(Compare ## op ## Signed, Integer)
#define CompareSignedUnsigned(op) \
        CompareUnsigned(op) \
        CompareSigned(op) \
        PartOfClass(Compare ## op ## Signed, op) \
        PartOfClass(Compare ## op ## Unsigned, op)
GroupCompare(Equals)
PartOfClass(CompareEquals, Ordinal)
PartOfClass(CompareEquals, Equals)
GroupCompare(NotEquals)
PartOfClass(CompareNotEquals, Ordinal)
PartOfClass(CompareNotEquals, NotEquals)
CompareSignedUnsigned(LessThan)
CompareSignedUnsigned(GreaterThan)
CompareSignedUnsigned(LessThanOrEqualTo)
CompareSignedUnsigned(GreaterThanOrEqualTo)
#undef CompareSigned
#undef CompareUnsigned
#undef CompareSignedUnsigned
#undef Logical

#undef ArithmeticSigned
#undef ArithmeticUnsigned
#undef ArithmeticSignedUnsigned
#undef IP
#undef IO
#undef Data
#undef Code
#undef Stack
#undef Memory
#undef GroupMemory 
#undef GroupBranch 
#undef GroupArithmetic
#undef GroupCompare
#undef PartOfClass
#undef GroupLogical
