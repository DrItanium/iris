/**
 * Contains all of the defined properties for different instructions, defining it implies
 * that it is true
 */

// DeclareProperty(InstructionName, PropertyName) 

#define PartOfClass(op, class) DeclareProperty(op, Is ## class ## Operation)
#define OfGroup(group, op) DeclareProperty(group ## op, Is ## group ## Operation)
#define GroupArithmetic(op) OfGroup(Arithmetic, op)
#define GroupCompare(op) OfGroup(Compare, op)
#define GroupBranch(op) OfGroup(Branch, op)
#define GroupMemory(op) OfGroup(Memory, op)
#define GroupLogical(op) OfGroup(Logical, op)
#define Memory(op, prop) \
    DeclareProperty(Memory ## op, prop) \
    GroupMemory(op)
#define Stack(op) Memory(Stack ## op, IsStackOperation)
#define Code(op) Memory(Code ## op, IsCodeOperation)
#define Data(op) Memory(Data ## op, IsDataOperation)
#define IO(op) Memory(IO ## op, IsIOOperation)
#define IP(op) Memory(op, ManipulatesIP)
#define ArithmeticUnsigned(op) \
        GroupArithmetic(op ## Unsigned) \
        PartOfClass(Arithmetic ## op ## Unsigned, Ordinal)

#define ArithmeticSigned(op) \
        GroupArithmetic(op ## Signed) \
        PartOfClass(Arithmetic ## op ## Signed, Integer)
    
#define ArithmeticSignedUnsigned(op) \
        ArithmeticUnsigned(op) \
        ArithmeticSigned(op) \
        PartOfClass(Arithmetic ## op ## Signed, op) \
        PartOfClass(Arithmetic ## op ## Unsigned, op)
#define Logical(op) \
        GroupLogical(op) \
        PartOfClass(Logical ## op , op)
#define CompareUnsigned(op) \
        GroupCompare(op ## Unsigned) \
        PartOfClass(Compare ## op ## Unsigned, Ordinal)

#define CompareSigned(op) \
        GroupCompare(op ## Signed) \
        PartOfClass(Compare ## op ## Signed, Integer)
#define CompareSignedUnsigned(op) \
        CompareUnsigned(op) \
        CompareSigned(op) \
        PartOfClass(Compare ## op ## Signed, op) \
        PartOfClass(Compare ## op ## Unsigned, op)
//-----------------------------------------------------------------------------
// Error
//-----------------------------------------------------------------------------
PartOfClass(Error, Error)
//-----------------------------------------------------------------------------
// Memory
//-----------------------------------------------------------------------------
Stack(Push)
PartOfClass(MemoryStackPush, Push)

Stack(PushImmediateValue)
PartOfClass(MemoryStackPushImmediateValue, Push)

Stack(Pop)
PartOfClass(MemoryStackPop, Pop)

Code(LoadWithOffset)
PartOfClass(MemoryCodeLoadWithOffset, Load)

Code(StoreWithOffset)
PartOfClass(MemoryCodeStoreWithOffset, Store)

Data(LoadWithOffset)
PartOfClass(MemoryDataLoadWithOffset, Load)

Data(StoreWithOffset)
PartOfClass(MemoryDataStoreWithOffset, Store)

Data(StoreImmediateValue)
PartOfClass(MemoryDataStoreImmediateValue, StoreImmediate)

IO(LoadWithOffset)
PartOfClass(MemoryIOLoadWithOffset, Load)

IO(StoreWithOffset)
PartOfClass(MemoryIOStoreWithOffset, Store)

IO(StoreImmediateValue)
PartOfClass(MemoryIOStoreImmediateValue, StoreImmediate)

IP(MoveToIP)
PartOfClass(MemoryMoveToIP, MoveToIP)

IP(MoveFromIP)
PartOfClass(MemoryMoveFromIP, MoveFromIP)

GroupMemory(CopyRegister)
PartOfClass(MemoryCopyRegister, GPRManipulator)
PartOfClass(MemoryCopyRegister, CopyRegister)

GroupMemory(SwapRegisters)
PartOfClass(MemorySwapRegisters, GPRManipulator)
PartOfClass(MemorySwapRegisters, SwapRegisters)

GroupMemory(AssignRegisterImmediate)
PartOfClass(MemoryAssignRegisterImmediate, GPRManipulator)
PartOfClass(MemoryAssignRegisterImmediate, AssignRegisterImmediate)
//-----------------------------------------------------------------------------
// Branch 
//-----------------------------------------------------------------------------
GroupBranch(ConditionalImmediate)
DeclareProperty(BranchConditionalImmediate, IsBranchImmediateInstruction)
PartOfClass(BranchConditionalImmediate, Conditional)

GroupBranch(ConditionalRelativeImmediate)
DeclareProperty(BranchConditionalRelativeImmediate, IsBranchImmediateInstruction)
DeclareProperty(BranchConditionalRelativeImmediate, UsesRelativeOffset)
PartOfClass(BranchConditionalRelativeImmediate, Conditional)

GroupBranch(RelativeImmediateAndLink)
DeclareProperty(BranchRelativeImmediateAndLink, IsBranchImmediateInstruction)
DeclareProperty(BranchRelativeImmediateAndLink, UsesRelativeOffset)
DeclareProperty(BranchRelativeImmediateAndLink, UsesLinkRegister)

GroupBranch(ImmediateAndLink)
DeclareProperty(BranchImmediateAndLink, IsBranchImmediateInstruction)
DeclareProperty(BranchImmediateAndLink, UsesLinkRegister)

GroupBranch(ConditionalRegisterAndLink)
DeclareProperty(BranchConditionalRegisterAndLink, UsesLinkRegister)
PartOfClass(BranchConditionalRegisterAndLink, Conditional)
DeclareProperty(BranchConditionalRegisterAndLink, IsBranchRegisterInstruction)

GroupBranch(Select)
PartOfClass(BranchSelect, Select)
PartOfClass(BranchSelect, Conditional)
DeclareProperty(BranchSelect, IsBranchRegisterInstruction)
//-----------------------------------------------------------------------------
// Arithmetic 
//-----------------------------------------------------------------------------
ArithmeticSignedUnsigned(Add)

ArithmeticSignedUnsigned(Subtract)

ArithmeticSignedUnsigned(Multiply)

ArithmeticSignedUnsigned(Divide)
DeclareProperty(ArithmeticDivideSigned, Src2CannotBeZero)
DeclareProperty(ArithmeticDivideUnsigned, Src2CannotBeZero)

ArithmeticSignedUnsigned(Remainder)
DeclareProperty(ArithmeticRemainderSigned, Src2CannotBeZero)
DeclareProperty(ArithmeticRemainderUnsigned, Src2CannotBeZero)

ArithmeticSignedUnsigned(Max)

ArithmeticSignedUnsigned(Min)

ArithmeticSignedUnsigned(ShiftLeft)

ArithmeticSignedUnsigned(ShiftRight)
//-----------------------------------------------------------------------------
// Logical 
//-----------------------------------------------------------------------------
Logical(BitwiseOr)

Logical(BitwiseAnd)

Logical(BitwiseNot)

Logical(BitwiseXor)
//-----------------------------------------------------------------------------
// Compare
//-----------------------------------------------------------------------------
GroupCompare(Equals)
PartOfClass(CompareEquals, Ordinal)
PartOfClass(CompareEquals, Equals)

GroupCompare(NotEquals)
PartOfClass(CompareNotEquals, Ordinal)
PartOfClass(CompareNotEquals, NotEquals)

CompareSignedUnsigned(LessThan)

CompareSignedUnsigned(GreaterThan)

CompareSignedUnsigned(LessThanOrEqualTo)

CompareSignedUnsigned(GreaterThanOrEqualTo)

//-----------------------------------------------------------------------------
#undef CompareSigned
#undef CompareUnsigned
#undef CompareSignedUnsigned
#undef Logical
#undef ArithmeticSigned
#undef ArithmeticUnsigned
#undef ArithmeticSignedUnsigned
#undef IP
#undef IO
#undef Data
#undef Code
#undef Stack
#undef Memory
#undef GroupMemory 
#undef GroupBranch 
#undef GroupArithmetic
#undef GroupCompare
#undef PartOfClass
#undef GroupLogical
