/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// error is just zero and is not part of a group
// X(name, Format, opcode)
#define Operation(name, format, opcode) X(name, format, static_cast<EncodedInstruction>((opcode)))

Operation(Error,                         ZeroRegister,   GroupArithmetic | bits::OperationError)
Operation(AddOrdinal,                    ThreeRegister,  GroupArithmetic | bits::OperationAdd | bits::KindOrdinal)
Operation(AddInteger,                    ThreeRegister,  GroupArithmetic | bits::OperationAdd | bits::KindInteger)
Operation(SubtractOrdinal,               ThreeRegister,  GroupArithmetic | bits::OperationSubtract | bits::KindOrdinal)
Operation(SubtractInteger,               ThreeRegister,  GroupArithmetic | bits::OperationSubtract | bits::KindInteger)
Operation(MultiplyOrdinal,               ThreeRegister,  GroupArithmetic | bits::OperationMultiply | bits::KindOrdinal)
Operation(MultiplyInteger,               ThreeRegister,  GroupArithmetic | bits::OperationMultiply | bits::KindInteger)
Operation(DivideOrdinal,                 ThreeRegister,  GroupArithmetic | bits::OperationDivide | bits::KindOrdinal)
Operation(DivideInteger,                 ThreeRegister,  GroupArithmetic | bits::OperationDivide | bits::KindInteger)
Operation(RemainderOrdinal,              ThreeRegister,  GroupArithmetic | bits::OperationRemainder | bits::KindOrdinal)
Operation(RemainderInteger,              ThreeRegister,  GroupArithmetic | bits::OperationRemainder | bits::KindInteger)
Operation(ShiftLeftOrdinal,              ThreeRegister,  GroupArithmetic | bits::OperationShiftLeft | bits::KindOrdinal)
Operation(ShiftLeftInteger,              ThreeRegister,  GroupArithmetic | bits::OperationShiftLeft | bits::KindInteger)
Operation(ShiftRightOrdinal,             ThreeRegister,  GroupArithmetic | bits::OperationShiftRight | bits::KindOrdinal)
Operation(ShiftRightInteger,             ThreeRegister,  GroupArithmetic | bits::OperationShiftRight | bits::KindInteger)
Operation(BitwiseNot,                    TwoRegister,    GroupBitwise    | bits::OperationNot)
Operation(Move,                          TwoRegister,    GroupBitwise    | bits::OperationNot | bits::NotTheResult)
Operation(LoadImmediate,                 OneRegisterU16, GroupBitwise    | bits::OperationNot | bits::NotTheResult | bits::ArgumentIsImm16)
Operation(BitwiseAnd,                    ThreeRegister,  GroupBitwise    | bits::OperationAnd)
Operation(BitwiseNand,                   ThreeRegister,  GroupBitwise    | bits::OperationAnd | bits::NotTheResult)
Operation(BitwiseOr,                     ThreeRegister,  GroupBitwise    | bits::OperationOr)
Operation(BitwiseNor,                    ThreeRegister,  GroupBitwise    | bits::OperationOr | bits::NotTheResult)
Operation(BitwiseXor,                    ThreeRegister,  GroupBitwise    | bits::OperationXor)
Operation(BitwiseXnor,                   ThreeRegister,  GroupBitwise    | bits::OperationXor | NotTheResult)
Operation(CodeLoadWithOffset,            TwoRegisterU8,  GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceCode)
Operation(CodeLoadFromImmediateAddress,  OneRegisterU16, GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceCode)
Operation(CodeStoreWithOffset,           TwoRegisterU8,  GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceCode)
Operation(CodeStoreToImmediateAddress,   OneRegisterU16, GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceCode)
Operation(DataLoadWithOffset,            TwoRegisterU8,  GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceData)
Operation(DataLoadFromImmediateAddress,  OneRegisterU16, GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceData)
Operation(DataStoreWithOffset,           TwoRegisterU8,  GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceData)
Operation(DataStoreToImmediateAddress,   OneRegisterU16, GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceData)
Operation(StackLoadWithOffset,           TwoRegisterU8,  GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceStack)
Operation(StackLoadFromImmediateAddress, OneRegisterU16, GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceStack)
Operation(StackStoreWithOffset,          TwoRegisterU8,  GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceStack)
Operation(StackStoreToImmediateAddress,  OneRegisterU16, GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceStack)
Operation(IOLoadWithOffset,              TwoRegisterU8,  GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceIO)
Operation(IOLoadFromImmediateAddress,    OneRegisterU16, GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceIO)
Operation(IOStoreWithOffset,             TwoRegisterU8,  GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceIO)
Operation(IOStoreToImmediateAddress,     OneRegisterU16, GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceIO)
Operation(CompareOrdinal,                ThreeRegister,  GroupCompare    | bits::KindOrdinal)
Operation(CompareInteger,                ThreeRegister,  GroupCompare    | bits::KindInteger)
// while these two opcodes are dumb, there may be a day where I can leverage this like the numerics architecture
// from i960 where branch if unordered will branch if an operation on reals yields an unordered number (NAN, etc)
Operation(BranchIfUnorderedToAbsoluteImmediate,      OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfUnordered)
Operation(BranchIfUnorderedToRelativeImmediate,      OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfUnordered)
Operation(BranchIfGreaterToAbsoluteImmediate,        OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfGreater)
Operation(BranchIfGreaterToRelativeImmediate,        OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfGreater)
Operation(BranchIfEqualToAbsoluteImmediate,          OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfEqual)
Operation(BranchIfEqualToRelativeImmediate,          OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfEqual)
Operation(BranchIfGreaterOrEqualToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfGreaterOrEqual)
Operation(BranchIfGreaterOrEqualToRelativeImmediate, OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfGreaterOrEqual)
Operation(BranchIfLessToAbsoluteImmediate,           OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfLess)
Operation(BranchIfLessToRelativeImmediate,           OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfLess)
Operation(BranchIfNotEqualToAbsoluteImmediate,       OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfNotEqual)
Operation(BranchIfNotEqualToRelativeImmediate,       OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfNotEqual)
Operation(BranchIfLessOrEqualToAbsoluteImmediate,    OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfLessOrEqual)
Operation(BranchIfLessOrEqualToRelativeImmediate,    OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfLessOrEqual)
Operation(BranchIfOrderedToAbsoluteImmediate,        OneRegisterU16, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfOrdered)
Operation(BranchIfOrderedToRelativeImmediate,        OneRegisterS16, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfOrdered)
Operation(BranchAbsoluteImmediateAndLink,            OneRegisterU16, GroupBranchImm | bits::IsLink | bits::AbsoluteJump)
Operation(BranchRelativeImmediateAndLink,            OneRegisterS16, GroupBranchImm | bits::IsLink | bits::RelativeJump)
Operation(BranchIfUnorderedToRegisterAndLink,        ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfUnordered)
Operation(BranchIfGreaterToRegisterAndLink,          ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfGreater)
Operation(BranchIfEqualToRegisterAndLink,            ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfEqual)
Operation(BranchIfGreaterOrEqualToRegisterAndLink,   ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfGreaterOrEqual)
Operation(BranchIfLessToRegisterAndLink,             ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfLess)
Operation(BranchIfNotEqualToRegisterAndLink,         ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfNotEqual)
Operation(BranchIfLessOrEqualToRegisterAndLink,      ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfLessOrEqual)
Operation(BranchIfOrderedToRegisterAndLink,          ThreeRegister,  GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfOrdered)
Operation(SelectIfUnordered,                         ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfUnordered)
Operation(SelectIfGreater,                           ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfGreater)
Operation(SelectIfEqual,                             ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfEqual)
Operation(SelectIfGreaterOrEqual,                    ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfGreaterOrEqual)
Operation(SelectIfLess,                              ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfLess)
Operation(SelectIfNotEqual,                          ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfNotEqual)
Operation(SelectIfLessOrEqual,                       ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfLessOrEqual)
Operation(SelectIfOrdered,                           ThreeRegister,  GroupBranchReg | bits::IsSelectOperation | bits::BranchIfOrdered)

#undef Operation
