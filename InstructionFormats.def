/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// error is just zero and is not part of a group
X(Error, ZeroArgument)
#define Instruction(group, op, Format) X(group ## op, Format)
#define Arithmetic(op, Format) Instruction(Arithmetic, op, Format)
#define ArithmeticSigned(op, Format) Arithmetic(op ## Signed, Format)
#define ArithmeticUnsigned(op, Format) Arithmetic(op ## Unsigned, Format)
#define ArithmeticSignedUnsigned(op, Format) \
    ArithmeticSigned(op, Format) \
    ArithmeticUnsigned(op, Format)
#define ArithmeticSignedImmediate(op) Arithmetic(op ## SignedImmediate, TwoRegisterS8)
#define ArithmeticUnsignedImmediate(op) Arithmetic(op ## UnsignedImmediate, TwoRegisterU8)
#define ArithmeticSignedUnsignedImmediate(op) \
        ArithmeticSignedImmediate(op) \
        ArithmeticUnsignedImmediate(op)
#define DoubleRegister(op, Format) Instruction(Arithmetic, Double ## op, Format)
#define DoubleRegisterSignedUnsigned(op, Format) \
        DoubleRegister(op ## Signed, Format) \
        DoubleRegister(op ## Unsigned, Format)
    ArithmeticSignedUnsigned(Add, ThreeRegister)
    ArithmeticSignedUnsigned(Subtract, ThreeRegister)
    ArithmeticSignedUnsigned(Multiply, ThreeRegister)
    ArithmeticSignedUnsigned(Divide, ThreeRegister)
    ArithmeticSignedUnsigned(Remainder, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftLeft, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftRight, ThreeRegister)
    ArithmeticSignedUnsigned(Max, ThreeRegister)
    ArithmeticSignedUnsigned(Min, ThreeRegister)
    Arithmetic(BitwiseNot, TwoRegister)
    Arithmetic(BitwiseAnd, ThreeRegister)
    Arithmetic(BitwiseOr, ThreeRegister)
    Arithmetic(BitwiseXor, ThreeRegister)
    Arithmetic(BitwiseNor, ThreeRegister)
    Arithmetic(BitwiseNand, ThreeRegister)
    // increment is adding one to register
    // decrement is subtracting one from the register
    ArithmeticSignedUnsignedImmediate(Add)
    ArithmeticSignedUnsignedImmediate(Subtract)
    // double is multiply by two or shift left by two
    ArithmeticSignedUnsignedImmediate(Multiply)
    // halve is divide by two or shift right by two imm
    ArithmeticSignedUnsignedImmediate(Divide)
    ArithmeticSignedUnsignedImmediate(Remainder)
    // double and triple can be defined in terms of this operation
    ArithmeticUnsignedImmediate(ShiftLeft)
    ArithmeticUnsignedImmediate(ShiftRight)
#undef DoubleRegisterSignedUnsigned
#undef DoubleRegister
#undef ArithmeticSignedImmediate
#undef ArithmeticUnsignedImmediate
#undef Arithmetic
#undef ArithmeticSigned
#undef ArithmeticUnsigned
#undef ArithmeticSignedUnsigned

#define Memory(op, Format) Instruction(Memory, op, Format)
#define Stack(op, Format) Memory(Stack ## op, Format)
#define Data(op, Format) Memory(Data ## op, Format)
#define Code(op, Format) Memory(Code ## op, Format)
#define IO(op, Format) Memory(IO ## op, Format)
    Memory(CopyRegister, TwoRegister)
    Memory(SwapRegisters, TwoRegister)
    Memory(AssignRegisterImmediate, OneRegisterU16)
    Stack(Push, TwoRegister)
    Stack(Pop, TwoRegister)
    Stack(PushImmediateValue, OneRegisterU16)
    Data(LoadWithOffset, TwoRegisterU8)
    Data(StoreWithOffset, TwoRegisterU8)
    Data(StoreImmediateValue, OneRegisterU16)
    Code(LoadWithOffset, TwoRegisterU8)
    Code(StoreWithOffset, TwoRegisterU8)
    Code(LoadMixedPair, ThreeRegister)
    Code(StoreMixedPair, ThreeRegister)
    IO(LoadWithOffset, TwoRegisterU8)
    IO(StoreWithOffset, TwoRegisterU8)
    IO(StoreImmediateValue, OneRegisterU16)
    Memory(MoveFromIP, OneRegister)
    Memory(MoveToIP, OneRegister)

#undef Stack
#undef Data
#undef Code
#undef IO
#undef Memory

#define Branch(op, Format) Instruction(Branch, op, Format)
    Branch(Immediate, U16)
    Branch(ConditionalImmediate, OneRegisterU16)
    // @todo make immediate branches always relative to IP like what is done with PPC
    // these instructions will always operate on signed 16-bit values instead of
    // unsigned ones.
    Branch(RelativeImmediate, S16)
    Branch(ConditionalRelativeImmediate, OneRegisterS16)
    Branch(RelativeImmediateAndLink, OneRegisterS16)
    Branch(Register, OneRegister)
    Branch(ConditionalRegister, TwoRegister)
    Branch(RegisterAndLink, TwoRegister)
    Branch(ImmediateAndLink, OneRegisterU16)
    Branch(ConditionalRegisterAndLink, ThreeRegister)
    Branch(Select, ThreeRegister)
#undef Branch
#define Compare(op, Format) Instruction(Compare, op, Format)
#define NormalCompare(op) Compare(op, ThreeRegister)
#define NormalSignedCompare(op) NormalCompare(op ## Signed)
#define NormalUnsignedCompare(op) NormalCompare(op ## Unsigned)
#define NormalSignedUnsignedCompare(op) \
        NormalSignedCompare(op) \
        NormalUnsignedCompare(op)
#define RawImm8Compare(op, Format) Compare(op ## Immediate8, Format)
#define Imm8Compare(op) RawImm8Compare(op, TwoRegisterU8)
#define Imm8SignedCompare(op) RawImm8Compare(op ## Signed , TwoRegisterS8)
#define Imm8UnsignedCompare(op) Imm8Compare(op ## Unsigned)
#define Imm8SignedUnsignedCompare(op) \
        Imm8SignedCompare(op) \
        Imm8UnsignedCompare(op)
    NormalCompare(Equals)
    NormalCompare(NotEquals)
    NormalSignedUnsignedCompare(LessThan)
    NormalSignedUnsignedCompare(GreaterThan)
    NormalSignedUnsignedCompare(LessThanOrEqualTo)
    NormalSignedUnsignedCompare(GreaterThanOrEqualTo)
    //NormalSignedUnsignedCompare(Spaceship)
    Imm8Compare(Equals)
    Imm8Compare(NotEquals)
    Imm8SignedUnsignedCompare(LessThan)
    Imm8SignedUnsignedCompare(GreaterThan)
    Imm8SignedUnsignedCompare(LessThanOrEqualTo)
    Imm8SignedUnsignedCompare(GreaterThanOrEqualTo)
    //Imm8SignedUnsignedCompare(Spaceship)

#undef NormalSignedCompare
#undef NormalUnsignedCompare 
#undef NormalCompare
#undef NormalSignedUnsignedCompare
#undef Imm8SignedUnsignedCompare
#undef RawImm8Compare
#undef Imm8Compare
#undef Imm8SignedCompare
#undef Imm8UnsignedCompare

#undef Compare
#undef Instruction

