/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// error is just zero and is not part of a group
// X(name, opcode)
#define Operation(name, opcode) X(name, (static_cast<EncodedInstruction>((opcode))))
//-------------------------------------------------------------------------------------------------
// Iris instructions are 32-bits wide and are carved up into four separate
// sections as follows:
// [0,  7] Argument2/Source2/Immediate8
// [8, 15] Argument1/Source1
// [16,23] Argument0/Destination
// [24,31] Opcode
// 
// With this design we can also merge Source2 and Source1 together to make a
// 16-bit immediate as well so we add this as well to the design:
// [0, 16] Immediate16

// Thus there are really a handful of forms with offshoots being degenerate
// cases. The forms are:
// 1) Three Register
// 1a) Two Register (Argument2 is 0)
// 1b) Two Register plus Imm8 (Argument2 does not refer to a register index)
// 2) One Register plus Imm16
// 2a) One Register (Imm16 is zero)
// 2b) Zero Register / Zero Argument (Argument0 and Imm16 are zero)
// 3) Imm24 (unused but theoretically possible)
//
// The rest of this file will describe the instructions and forms. Here are
// some other terms that may help if you are not familiar with them:
// 
// 1) Ordinal - Unsigned number
// 2) Integer - Signed number
//-------------------------------------------------------------------------------------------------
// The 8-bit opcode is divided generically into two parts:
// 0bMMMXXXXX
// where 0bMMM is the major opcode kind. There are a total of 8 major opcode
// groups with not all of the groups currently in use. The XXXXX portion (or
// minor opcode kind) is defined by the group to describe actions to perform 
// under that major kind.
//
// The groups are:
// 0b000XXXXX - Arithmetic
// 0b001XXXXX - Compare
// 0b010XXXXX - Memory
// 0b011XXXXX - Branch Immediate
// 0b100XXXXX - Branch Register
// 0b101XXXXX - Bitwise
// 0b110XXXXX - Reserved for future use
// 0b111XXXXX - Reserved for future use
//-------------------------------------------------------------------------------------------------
// Arithmetic
// Arithmetic operations consist of:
// - Error
// - Add
// - Subtract
// - Multiply
// - Divide
// - Remainder
// - Shift Left
// - Shift Right
//
// With the exception of Error, the other arithmetic operations have integer
// and ordinal forms. This comes from the very elegantly designed i960
// processor. 
// The bits of arithmetic instructions are as follows:
// 0b000,0,K,TTT
// where K is the operation kind with the following legend:
//  k == 0 -> Treat sources as ordinals
//  k == 1 -> Treat sources as integers
// where TTT is the operation code, here are the following values:
//  0b000 -> Error
//  0b001 -> Add
//  0b010 -> Subtract 
//  0b011 -> Multiply 
//  0b100 -> Divide 
//  0b101 -> Remainder 
//  0b110 -> Shift Left 
//  0b111 -> Shift Right
//
// the most significant bit of the minor opcode kind is reserved and currently
// goes unused. It must be set to zero
//-------------------------------------------------------------------------------------------------
/**
  * This is to make sure that a zero instruction is considered to be an error
  */
Operation(Error,                                     GroupArithmetic | bits::OperationError)
/**
  * Form: Three Register
  * Logic: reg[dest] = reg[src1] + reg[src2}
  */
Operation(AddOrdinal,                                GroupArithmetic | bits::OperationAdd | bits::KindOrdinal)
Operation(AddInteger,                                GroupArithmetic | bits::OperationAdd | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = reg[src1] - reg[src2]
  */
Operation(SubtractOrdinal,                           GroupArithmetic | bits::OperationSubtract | bits::KindOrdinal)
Operation(SubtractInteger,                           GroupArithmetic | bits::OperationSubtract | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = reg[src1] * reg[src2]
  */
Operation(MultiplyOrdinal,                           GroupArithmetic | bits::OperationMultiply | bits::KindOrdinal)
Operation(MultiplyInteger,                           GroupArithmetic | bits::OperationMultiply | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = reg[src1] / reg[src2]
  * NOTE: Will error if reg[src2] is zero
  */
Operation(DivideOrdinal,                             GroupArithmetic | bits::OperationDivide | bits::KindOrdinal)
Operation(DivideInteger,                             GroupArithmetic | bits::OperationDivide | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = reg[src1] % reg[src2]
  * NOTE: Will error if reg[src2] is zero
  */
Operation(RemainderOrdinal,                          GroupArithmetic | bits::OperationRemainder | bits::KindOrdinal)
Operation(RemainderInteger,                          GroupArithmetic | bits::OperationRemainder | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = (reg[src2] > 31) ? (reg[src1] << reg[src2]) : 0
  */

Operation(ShiftLeftOrdinal,                          GroupArithmetic | bits::OperationShiftLeft | bits::KindOrdinal)
Operation(ShiftLeftInteger,                          GroupArithmetic | bits::OperationShiftLeft | bits::KindInteger)
/**
  * Form: Three Register
  * Logic: reg[dest] = (reg[src2] > 31) ? (reg[src1] >> reg[src2]) : 0
  */
Operation(ShiftRightOrdinal,                         GroupArithmetic | bits::OperationShiftRight | bits::KindOrdinal)
Operation(ShiftRightInteger,                         GroupArithmetic | bits::OperationShiftRight | bits::KindInteger)
//-------------------------------------------------------------------------------------------------
// Bitwise operations include:
// And, Or, Not, Xor, Nand, Nor, and Xnor. The bitwise group is divided into
// the following full pattern:
// 0b101,0,A,N,TT
// Where:
//
// A denotes if the bitwise operation treats src0 and src1 as an
// immediate 16 bit value (changes the instruction form), 
//    A == 1 -> Treat arg1 and arg2 as a single 16-bit ordinal, this implies a
//              destructive modification in the case of the binary operations
//    A == 0 -> Treat arg1 and arg2 as separate registers, implies a binary
//              non-destructive operation
//
// N says to not the result of the operation before storing in destination
//    N == 1 -> Not the result of the operation before storing in destination
//              This can be used to perform a load immediate 16 with bitwise not
//              and A == 1.
//              Can also be used combined with binary not and A==0 to do a
//              register transfer. 
//              This is combined with and, or, and xor to make nand, nor, and
//              xnor operations
//    N == 0 -> Store the result of the operation as is in the destination
// 
// TT is the operation type
//   TT = 0b00 -> bitwise not
//   TT = 0b01 -> bitwise and
//   TT = 0b10 -> bitwise or
//   TT = 0b11 -> bitwise xor
Operation(Move,                                      GroupBitwise    | bits::OperationNot | bits::NotTheResult)
Operation(BitwiseNot,                                GroupBitwise    | bits::OperationNot)
Operation(BitwiseAnd,                                GroupBitwise    | bits::OperationAnd)
Operation(BitwiseNand,                               GroupBitwise    | bits::OperationAnd | bits::NotTheResult)
Operation(BitwiseOr,                                 GroupBitwise    | bits::OperationOr)
Operation(BitwiseNor,                                GroupBitwise    | bits::OperationOr | bits::NotTheResult)
Operation(BitwiseXor,                                GroupBitwise    | bits::OperationXor)
Operation(BitwiseXnor,                               GroupBitwise    | bits::OperationXor | bits::NotTheResult)
//-------------------------------------------------------------------------------------------------
// Memory Operations (load, store, and misc register transfer)
// 
// Format is: 0b010,L,XXXX
// Where
// L is load when set
//      store when clear
// When L is set the format is:
//    0b0101,KK,XX 
//   where KK is:
//    0b00 -> Word
//    0b01 -> Half
//    0b10 -> Byte
//    0b11 -> Immediate16
//   When KK == 0b11 the rest of the bits are: S0
//    where S is shift imm16 by 16 before storing when set
//            is load imm16 into lower 16 when clear
//    lowest most bit is not used
//   When KK != 0b11 the rest of the bits are: UC
//    where U is update source register if set
//    where C is treat the arg2 as:
//        signed imm8 when C is clear
//        register with signed contents when C is set
// 
// When L is clear the format is very similar:
//    0b0101,KK,XX 
//   where KK is:
//    0b00 -> Word
//    0b01 -> Half
//    0b10 -> Byte
//    0b11 -> Reserved
//   When KK != 0b11 the rest of the bits are: UC
//    where U is update source register if set
//    where C is treat the arg2 as:
//        signed imm8 when C is clear
//        register with signed contents when C is set

Operation(LoadWordWithImmediateOffset,          GroupMemory | bits::LoadOperation | bits::MemoryWidthWord | bits::DoNotUpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadWordWithImmediateOffsetAndUpdate, GroupMemory | bits::LoadOperation | bits::MemoryWidthWord | bits::UpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadWordWithRegisterOffset,           GroupMemory | bits::LoadOperation | bits::MemoryWidthWord | bits::DoNotUpdateSource | bits::TreatArg2AsRegisterIndex)
Operation(LoadWordWithRegisterOffsetAndUpdate,  GroupMemory | bits::LoadOperation | bits::MemoryWidthWord | bits::UpdateSource | bits::TreatArg2AsRegisterIndex)
Operation(LoadHalfWithImmediateOffset,          GroupMemory | bits::LoadOperation | bits::MemoryWidthHalf | bits::DoNotUpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadHalfWithImmediateOffsetAndUpdate, GroupMemory | bits::LoadOperation | bits::MemoryWidthHalf | bits::UpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadHalfWithRegisterOffset,           GroupMemory | bits::LoadOperation | bits::MemoryWidthHalf | bits::DoNotUpdateSource | bits::TreatArg2AsRegisterIndex)
Operation(LoadHalfWithRegisterOffsetAndUpdate,  GroupMemory | bits::LoadOperation | bits::MemoryWidthHalf | bits::UpdateSource | bits::TreatArg2AsRegisterIndex)
Operation(LoadByteWithImmediateOffset,          GroupMemory | bits::LoadOperation | bits::MemoryWidthByte | bits::DoNotUpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadByteWithImmediateOffsetAndUpdate, GroupMemory | bits::LoadOperation | bits::MemoryWidthByte | bits::UpdateSource | bits::TreatArg2AsSignedImm8)
Operation(LoadByteWithRegisterOffset,           GroupMemory | bits::LoadOperation | bits::MemoryWidthByte | bits::DoNotUpdateSource | bits::TreatArg2AsRegisterIndex)
Operation(LoadByteWithRegisterOffsetAndUpdate,  GroupMemory | bits::LoadOperation | bits::MemoryWidthByte | bits::UpdateSource | bits::TreatArg2AsRegisterIndex)

//Operation(LoadImmediateShifted16,                    GroupMemory
//Operation(CodeLoadWithOffset,                        GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceCode) 
//Operation(CodeLoadFromImmediateAddress,              GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceCode)
//Operation(CodeStoreWithOffset,                       GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceCode)
//Operation(CodeStoreToImmediateAddress,               GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceCode)
//Operation(DataLoadWithOffset,                        GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceData)
//Operation(DataLoadFromImmediateAddress,              GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceData)
//Operation(DataStoreWithOffset,                       GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceData)
//Operation(DataStoreToImmediateAddress,               GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceData)
//Operation(StackLoadWithOffset,                       GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceStack)
//Operation(StackLoadFromImmediateAddress,             GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceStack)
//Operation(StackStoreWithOffset,                      GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceStack)
//Operation(StackStoreToImmediateAddress,              GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceStack)
//Operation(IOLoadWithOffset,                          GroupMemory     | bits::LoadOperation  | bits::Arg1IsRegister  | bits::SpaceIO)
//Operation(IOLoadFromImmediateAddress,                GroupMemory     | bits::LoadOperation  | bits::Arg1IsImm       | bits::SpaceIO)
//Operation(IOStoreWithOffset,                         GroupMemory     | bits::StoreOperation | bits::Arg1IsRegister  | bits::SpaceIO)
//Operation(IOStoreToImmediateAddress,                 GroupMemory     | bits::StoreOperation | bits::Arg1IsImm       | bits::SpaceIO)
//-------------------------------------------------------------------------------------------------
Operation(CompareOrdinal,                            GroupCompare    | bits::KindOrdinal)
Operation(CompareInteger,                            GroupCompare    | bits::KindInteger)
//-------------------------------------------------------------------------------------------------
// while these two opcodes are dumb, there may be a day where I can leverage this like the numerics architecture
// from i960 where branch if unordered will branch if an operation on reals yields an unordered number (NAN, etc)
Operation(BranchIfUnorderedToAbsoluteImmediate,      GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfUnordered)
Operation(BranchIfUnorderedToRelativeImmediate,      GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfUnordered)
Operation(BranchIfGreaterToAbsoluteImmediate,        GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfGreater)
Operation(BranchIfGreaterToRelativeImmediate,        GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfGreater)
Operation(BranchIfEqualToAbsoluteImmediate,          GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfEqual)
Operation(BranchIfEqualToRelativeImmediate,          GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfEqual)
Operation(BranchIfGreaterOrEqualToAbsoluteImmediate, GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfGreaterOrEqual)
Operation(BranchIfGreaterOrEqualToRelativeImmediate, GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfGreaterOrEqual)
Operation(BranchIfLessToAbsoluteImmediate,           GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfLess)
Operation(BranchIfLessToRelativeImmediate,           GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfLess)
Operation(BranchIfNotEqualToAbsoluteImmediate,       GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfNotEqual)
Operation(BranchIfNotEqualToRelativeImmediate,       GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfNotEqual)
Operation(BranchIfLessOrEqualToAbsoluteImmediate,    GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfLessOrEqual)
Operation(BranchIfLessOrEqualToRelativeImmediate,    GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfLessOrEqual)
Operation(BranchIfOrderedToAbsoluteImmediate,        GroupBranchImm | bits::IsConditional | bits::AbsoluteJump | bits::BranchIfOrdered)
Operation(BranchIfOrderedToRelativeImmediate,        GroupBranchImm | bits::IsConditional | bits::RelativeJump | bits::BranchIfOrdered)
Operation(BranchAbsoluteImmediateAndLink,            GroupBranchImm | bits::IsLink   | bits::AbsoluteJump)
Operation(BranchRelativeImmediateAndLink,            GroupBranchImm | bits::IsLink | bits::RelativeJump)
Operation(BranchIfUnorderedToRegisterAndLink,        GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfUnordered)
Operation(BranchIfGreaterToRegisterAndLink,          GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfGreater)
Operation(BranchIfEqualToRegisterAndLink,            GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfEqual)
Operation(BranchIfGreaterOrEqualToRegisterAndLink,   GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfGreaterOrEqual)
Operation(BranchIfLessToRegisterAndLink,             GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfLess)
Operation(BranchIfNotEqualToRegisterAndLink,         GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfNotEqual)
Operation(BranchIfLessOrEqualToRegisterAndLink,      GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfLessOrEqual)
Operation(BranchIfOrderedToRegisterAndLink,          GroupBranchReg | bits::IsConditionalBranchAndLink | bits::BranchIfOrdered)
//-------------------------------------------------------------------------------------------------
Operation(SelectIfUnordered,                         GroupBranchReg | bits::IsSelectOperation | bits::BranchIfUnordered)
Operation(SelectIfGreater,                           GroupBranchReg | bits::IsSelectOperation | bits::BranchIfGreater)
Operation(SelectIfEqual,                             GroupBranchReg | bits::IsSelectOperation | bits::BranchIfEqual)
Operation(SelectIfGreaterOrEqual,                    GroupBranchReg | bits::IsSelectOperation | bits::BranchIfGreaterOrEqual)
Operation(SelectIfLess,                              GroupBranchReg | bits::IsSelectOperation | bits::BranchIfLess)
Operation(SelectIfNotEqual,                          GroupBranchReg | bits::IsSelectOperation | bits::BranchIfNotEqual)
Operation(SelectIfLessOrEqual,                       GroupBranchReg | bits::IsSelectOperation | bits::BranchIfLessOrEqual)
Operation(SelectIfOrdered,                           GroupBranchReg | bits::IsSelectOperation | bits::BranchIfOrdered)

#undef Operation
