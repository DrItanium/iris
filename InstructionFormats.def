/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// error is just zero and is not part of a group
// X(name, Format, opcode)
#define Operation(name, format, opcode) X(name, format, static_cast<EncodedInstruction>((opcode)))

Operation(Error,               ZeroRegister,  GroupArithmetic | OperationError)
Operation(AddOrdinal,          ThreeRegister, GroupArithmetic | OperationAdd | KindOrdinal)
Operation(AddInteger,          ThreeRegister, GroupArithmetic | OperationAdd | KindInteger)
Operation(SubtractOrdinal,     ThreeRegister, GroupArithmetic | OperationSubtract | KindOrdinal)
Operation(SubtractInteger,     ThreeRegister, GroupArithmetic | OperationSubtract | KindInteger)
Operation(MultiplyOrdinal,     ThreeRegister, GroupArithmetic | OperationMultiply | KindOrdinal)
Operation(MultiplyInteger,     ThreeRegister, GroupArithmetic | OperationMultiply | KindInteger)
Operation(DivideOrdinal,       ThreeRegister, GroupArithmetic | OperationDivide | KindOrdinal)
Operation(DivideInteger,       ThreeRegister, GroupArithmetic | OperationDivide | KindInteger)
Operation(RemainderOrdinal,    ThreeRegister, GroupArithmetic | OperationRemainder | KindOrdinal)
Operation(RemainderInteger,    ThreeRegister, GroupArithmetic | OperationRemainder | KindInteger)
Operation(ShiftLeftOrdinal,    ThreeRegister, GroupArithmetic | OperationShiftLeft | KindOrdinal)
Operation(ShiftLeftInteger,    ThreeRegister, GroupArithmetic | OperationShiftLeft | KindInteger)
Operation(ShiftRightOrdinal,   ThreeRegister, GroupArithmetic | OperationShiftRight | KindOrdinal)
Operation(ShiftRightInteger,   ThreeRegister, GroupArithmetic | OperationShiftRight | KindInteger)
Operation(BitwiseNot,    TwoRegister,      GroupBitwise | OperationNot)
Operation(Move,          TwoRegister,      GroupBitwise | OperationNot | NotTheResult)
Operation(LoadImmediate, OneRegisterU16,   GroupBitwise | OperationNot | NotTheResult | ArgumentIsImm16)
Operation(BitwiseAnd,    ThreeRegister,    GroupBitwise | OperationAnd)
Operation(BitwiseNand,   ThreeRegister,    GroupBitwise | OperationAnd | NotTheResult)
Operation(BitwiseOr,     ThreeRegister,    GroupBitwise | OperationOr)
Operation(BitwiseNor,    ThreeRegister,    GroupBitwise | OperationOr | NotTheResult)
Operation(BitwiseXor,    ThreeRegister,    GroupBitwise | OperationXor)
Operation(BitwiseXnor,   ThreeRegister,    GroupBitwise | OperationXor | NotTheResult)
Operation(CodeLoadWithOffset,            TwoRegisterU8,  GroupMemory | LoadOperation | Arg1IsRegister | SpaceCode)
Operation(CodeLoadFromImmediateAddress,  OneRegisterU16, GroupMemory | LoadOperation | Arg1IsImm      | SpaceCode)
Operation(CodeStoreWithOffset,           TwoRegisterU8,  GroupMemory | StoreOperation | Arg1IsRegister | SpaceCode)
Operation(CodeStoreToImmediateAddress,   OneRegisterU16, GroupMemory | StoreOperation | Arg1IsImm      | SpaceCode)
Operation(DataLoadWithOffset,            TwoRegisterU8,  GroupMemory | LoadOperation | Arg1IsRegister | SpaceData)
Operation(DataLoadFromImmediateAddress,  OneRegisterU16, GroupMemory | LoadOperation | Arg1IsImm      | SpaceData)
Operation(DataStoreWithOffset,           TwoRegisterU8,  GroupMemory | StoreOperation | Arg1IsRegister | SpaceData)
Operation(DataStoreToImmediateAddress,   OneRegisterU16, GroupMemory | StoreOperation | Arg1IsImm      | SpaceData)
Operation(StackLoadWithOffset,           TwoRegisterU8,  GroupMemory | LoadOperation | Arg1IsRegister | SpaceStack)
Operation(StackLoadFromImmediateAddress, OneRegisterU16, GroupMemory | LoadOperation | Arg1IsImm      | SpaceStack)
Operation(StackStoreWithOffset,          TwoRegisterU8,  GroupMemory | StoreOperation | Arg1IsRegister | SpaceStack)
Operation(StackStoreToImmediateAddress,  OneRegisterU16, GroupMemory | StoreOperation | Arg1IsImm      | SpaceStack)
Operation(IOLoadWithOffset,              TwoRegisterU8,  GroupMemory | LoadOperation | Arg1IsRegister | SpaceIO)
Operation(IOLoadFromImmediateAddress,    OneRegisterU16, GroupMemory | LoadOperation | Arg1IsImm      | SpaceIO)
Operation(IOStoreWithOffset,             TwoRegisterU8,  GroupMemory | StoreOperation | Arg1IsRegister | SpaceIO)
Operation(IOStoreToImmediateAddress,     OneRegisterU16, GroupMemory | StoreOperation | Arg1IsImm      | SpaceIO)
Operation(CompareOrdinal, ThreeRegister, GroupCompare | KindOrdinal)
Operation(CompareInteger, ThreeRegister, GroupInteger | KindInteger)
// while these two opcodes are dumb, there may be a day where I can leverage this like the numerics architecture
// from i960 where branch if unordered will branch if an operation on reals yields an unordered number (NAN, etc)
Operation(BranchIfUnorderedToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfUnordered)
Operation(BranchIfUnorderedToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfUnordered)
Operation(BranchIfGreaterToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfGreater)
Operation(BranchIfGreaterToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfGreater)
Operation(BranchIfEqualToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfEqual)
Operation(BranchIfEqualToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfEqual)
Operation(BranchIfGreaterOrEqualToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfGreaterOrEqual)
Operation(BranchIfGreaterOrEqualToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfGreaterOrEqual)
Operation(BranchIfLessToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfLess)
Operation(BranchIfLessToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfLess)
Operation(BranchIfNotEqualToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfNotEqual)
Operation(BranchIfNotEqualToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfNotEqual)
Operation(BranchIfLessOrEqualToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfLessOrEqual)
Operation(BranchIfLessOrEqualToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfLessOrEqual)
// the hardcoded integer registers can be provided implicitly by the assembler
Operation(BranchIfOrderedToAbsoluteImmediate, OneRegisterU16, GroupBranchImm | IsConditional | AbsoluteJump | BranchIfOrdered)
Operation(BranchIfOrderedToRelativeImmediate, OneRegisterS16, GroupBranchImm | IsConditional | RelativeJump | BranchIfOrdered)
// Link operations
Operation(BranchAbsoluteImmediateAndLink, OneRegisterU16, GroupBranchImm | IsLink | AbsoluteJump)
Operation(BranchRelativeImmediateAndLink, OneRegisterS16, GroupBranchImm | IsLink | RelativeJump)
// disabling link is a simple as binding the link register to a hardcoded register, this will cause the link to be ignored
Operation(BranchIfUnorderedToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfUnordered)
Operation(BranchIfGreaterToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfGreater)
Operation(BranchIfEqualToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfEqual)
Operation(BranchIfGreaterOrEqualToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfGreaterOrEqual)
Operation(BranchIfLessToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfLess)
Operation(BranchIfNotEqualToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfNotEqual)
Operation(BranchIfLessOrEqualToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfLessOrEqual)
// this branch is used for unconditional branches
Operation(BranchIfOrderedToRegisterAndLink, ThreeRegister, GroupBranchReg | IsConditionalBranchAndLink | BranchIfOrdered)
// select operations
// always select the on false register
Operation(SelectIfUnordered, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfUnordered)
Operation(SelectIfGreater, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfGreater)
Operation(SelectIfEqual, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfEqual)
Operation(SelectIfGreaterOrEqual, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfGreaterOrEqual)
Operation(SelectIfLess, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfLess)
Operation(SelectIfNotEqual, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfNotEqual)
Operation(SelectIfLessOrEqual, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfLessOrEqual)
// always select the true register
Operation(SelectIfOrdered, ThreeRegister, GroupBranchReg | IsSelectOperation | BranchIfOrdered)

#undef Operation
