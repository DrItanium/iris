/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// error is just zero and is not part of a group
#define Instruction(group, op, Format) X(group ## op, Format)
#define Logical(op, Format) Instruction(Logical, op, Format)
#define Arithmetic(op, Format) Instruction(Arithmetic, op, Format)
#define ArithmeticSigned(op, Format) Arithmetic(op ## Signed, Format)
#define ArithmeticUnsigned(op, Format) Arithmetic(op ## Unsigned, Format)
#define ArithmeticSignedUnsigned(op, Format) \
    ArithmeticSigned(op, Format) \
    ArithmeticUnsigned(op, Format)
#define Memory(op, Format) Instruction(Memory, op, Format)
#define Stack(op, Format) Memory(Stack ## op, Format)
#define Data(op, Format) Memory(Data ## op, Format)
#define Code(op, Format) Memory(Code ## op, Format)
#define IO(op, Format) Memory(IO ## op, Format)
#define Compare(op, Format) Instruction(Compare, op, Format)
#define NormalCompare(op) Compare(op, ThreeRegister)
#define NormalSignedCompare(op) NormalCompare(op ## Signed)
#define NormalUnsignedCompare(op) NormalCompare(op ## Unsigned)
#define NormalSignedUnsignedCompare(op) \
        NormalSignedCompare(op) \
        NormalUnsignedCompare(op)
#define Branch(op, Format) Instruction(Branch, op, Format)
//-----------------------------------------------------------------------------
// Arithmetic
//-----------------------------------------------------------------------------
    ArithmeticSignedUnsigned(Add, ThreeRegister)
    ArithmeticSignedUnsigned(Subtract, ThreeRegister)
    ArithmeticSignedUnsigned(Multiply, ThreeRegister)
    ArithmeticSignedUnsigned(Divide, ThreeRegister)
    ArithmeticSignedUnsigned(Remainder, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftLeft, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftRight, ThreeRegister)
//-----------------------------------------------------------------------------
// Logical
//-----------------------------------------------------------------------------
    Logical(BitwiseNot, TwoRegister)
    Logical(BitwiseAnd, ThreeRegister)
    Logical(BitwiseOr, ThreeRegister)
    Logical(BitwiseXor, ThreeRegister)
//-----------------------------------------------------------------------------
// Memory
//-----------------------------------------------------------------------------
    Memory(AssignRegisterImmediate, OneRegisterU16)
    Stack(Push, TwoRegister)
    Stack(Pop, TwoRegister)
    Data(LoadWithOffset, TwoRegisterU8)
    Data(StoreWithOffset, TwoRegisterU8)
    Code(LoadWithOffset, TwoRegisterU8)
    Code(StoreWithOffset, TwoRegisterU8)
    IO(LoadWithOffset, TwoRegisterU8)
    IO(StoreWithOffset, TwoRegisterU8)
//-----------------------------------------------------------------------------
// Branch
//-----------------------------------------------------------------------------
    // all unconditional one way branches are redefined in terms of the conditional
    // versions
    Branch(ConditionalImmediate, OneRegisterU16)
    Branch(ConditionalRelativeImmediate, OneRegisterS16)
    Branch(RelativeImmediateAndLink, OneRegisterS16)
    Branch(ImmediateAndLink, OneRegisterU16)
    Branch(ConditionalRegisterAndLink, ThreeRegister)
    Branch(Select, ThreeRegister)
//-----------------------------------------------------------------------------
// Compare
//-----------------------------------------------------------------------------
    X(CompareUnsigned, ThreeRegister)
    X(CompareSigned, ThreeRegister)
//-----------------------------------------------------------------------------
// Compare and Branch
//-----------------------------------------------------------------------------


#undef NormalSignedCompare
#undef NormalUnsignedCompare 
#undef NormalCompare
#undef NormalSignedUnsignedCompare

#undef Compare
#undef Instruction

#undef ArithmeticSignedImmediate
#undef ArithmeticUnsignedImmediate
#undef Arithmetic
#undef ArithmeticSigned
#undef ArithmeticUnsigned
#undef ArithmeticSignedUnsigned
#undef Branch
#undef Stack
#undef Data
#undef Code
#undef IO
#undef Memory
#undef ArithmeticSignedUnsignedImmediate
#undef Logical
