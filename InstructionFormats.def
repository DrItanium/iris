/**
 * This file contains the binding between a given operation and its corresponding
 * format. Update this file when adding new type information
 */
// separate group information
BeginGroups
    Group(Arithmetic)
    Group(Memory)
    Group(Branch)
    Group(Compare)
    Group(Arithmetic2)
EndGroups
/// Format is: Group, Operation, ArgumentFormat
BeginKind(Arithmetic)
#define Arithmetic(op, Format) X(Arithmetic, op, Format)
#define ArithmeticSigned(op, Format) Arithmetic(op ## Signed, Format)
#define ArithmeticUnsigned(op, Format) Arithmetic(op ## Unsigned, Format)
#define ArithmeticSignedUnsigned(op, Format) \
    ArithmeticSigned(op, Format) \
    ArithmeticUnsigned(op, Format)

    Arithmetic(Error, ZeroArgument)
    ArithmeticSignedUnsigned(Add, ThreeRegister)
    ArithmeticSignedUnsigned(Subtract, ThreeRegister)
    ArithmeticSignedUnsigned(Multiply, ThreeRegister)
    ArithmeticSignedUnsigned(Divide, ThreeRegister)
    ArithmeticSignedUnsigned(Remainder, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftLeft, ThreeRegister)
    ArithmeticSignedUnsigned(ShiftRight, ThreeRegister)
    Arithmetic(BitwiseNot, TwoRegister)
    Arithmetic(BitwiseAnd, ThreeRegister)
    Arithmetic(BitwiseOr, ThreeRegister)
    Arithmetic(BitwiseXor, ThreeRegister)
    Arithmetic(BitwiseNor, ThreeRegister)
    Arithmetic(BitwiseNand, ThreeRegister)
    ArithmeticSignedUnsigned(Max, ThreeRegister)
    ArithmeticSignedUnsigned(Min, ThreeRegister)
    Arithmetic(Increment, TwoRegister)
    Arithmetic(Decrement, TwoRegister)
    Arithmetic(Double, TwoRegister)
    Arithmetic(Halve, TwoRegister)

#undef Arithmetic
#undef ArithmeticSigned
#undef ArithmeticUnsigned
#undef ArithmeticSignedUnsigned
EndKind(Arithmetic)

BeginKind(Arithmetic2)
#define Arithmetic2(op, Format) X(Arithmetic2, op, Format)
#define Arithmetic2SignedImmediate(op) Arithmetic2(op ## SignedImmediate, TwoRegisterS8)
#define Arithmetic2UnsignedImmediate(op) Arithmetic2(op ## UnsignedImmediate, TwoRegisterU8)
#define Arithmetic2SignedUnsignedImmediate(op) \
        Arithmetic2SignedImmediate(op) \
        Arithmetic2UnsignedImmediate(op) 
    Arithmetic2SignedImmediate(Add)
    Arithmetic2SignedImmediate(Subtract)
    Arithmetic2SignedImmediate(Multiply)
    Arithmetic2SignedImmediate(Divide)
    Arithmetic2SignedImmediate(Remainder)
    Arithmetic2SignedImmediate(ShiftLeft)
    Arithmetic2SignedImmediate(ShiftRight)
    Arithmetic2(BitwiseAndImmediate, TwoRegisterU8)
    Arithmetic2(BitwiseOrImmediate, TwoRegisterU8)
    Arithmetic2(BitwiseNotImmediate, OneRegisterU16)
    Arithmetic2(BitwiseXorImmediate, TwoRegisterU8)
    Arithmetic2(BitwiseNorImmediate, TwoRegisterU8)
    Arithmetic2(BitwiseNandImmediate, TwoRegisterU8)
#undef Arithmetic2
#undef Arithmetic2SignedImmediate
#undef Arithmetic2UnsignedImmediate 
#undef Arithmetic2SignedUnsignedImmediate
EndKind(Arithmetic2)


BeginKind(Memory)
#define Memory(op, Format) X(Memory, op, Format)
    Memory(CopyRegister, TwoRegister)
    Memory(SwapRegisters, TwoRegister)
    Memory(AssignRegisterImmediate, OneRegisterU16)
    Memory(AssignRegisterSignedImmediate, OneRegisterS16)
#define Stack(op, Format) Memory(Stack ## op, Format)
    Stack(Push, TwoRegister)
    Stack(Pop, TwoRegister)
    Stack(PushImmediateValue, OneRegisterU16)
#undef Stack
#define Data(op, Format) Memory(Data ## op, Format)
    // So when dealing with data operations we have some interesting stuff to think about
    // - There is always an offset that can either be a register or immediate
    // - Because it can be register or immediate offset, there will need to be 
    //   multiple forms of each instruction
    // - Code modifications do not take offsets into account, however an increment
    //   can happen automatically as part of the load store operation as well
    // - Offsets can either be signed or unsigned
    // 
    // Other notes:
    // DataStoreImmediateValue stores an imm16 at the given target address in data space
    // IOStoreImmediateValue stores an imm16 at the given target address in IO space
    Data(LoadWithSignedOffset, TwoRegisterS8)
    Data(StoreWithSignedOffset, TwoRegisterS8)
    Data(LoadWithUnsignedOffset, TwoRegisterU8)
    Data(StoreWithUnsignedOffset, TwoRegisterU8)
    Data(StoreImmediateValue, OneRegisterU16)
#undef Data
#define Code(op) Memory(Code ## op, ThreeRegister)
    Code(Load)
    Code(Store)
    Code(LoadAndIncrement)
    Code(StoreAndIncrement)
    Code(LoadAndDecrement)
    Code(StoreAndDecrement)
#undef Code

#define IO(op, Format) Memory(IO ## op, Format)
    IO(LoadWithSignedOffset, TwoRegisterS8)
    IO(StoreWithSignedOffset, TwoRegisterS8)
    IO(LoadWithUnsignedOffset, TwoRegisterU8)
    IO(StoreWithUnsignedOffset, TwoRegisterU8)
    IO(StoreImmediateValue, OneRegisterU16)
#undef IO

#undef Memory
EndKind(Memory)
BeginKind(Branch)
#define Branch(op, Format) X(Branch, op, Format)
    Branch(Immediate, U16)
    Branch(ConditionalImmediate, OneRegisterU16)
    Branch(RelativeImmediate, OneRegisterS8)
    Branch(ConditionalRelativeImmediate, TwoRegisterS8)
    Branch(Register, OneRegister)
    Branch(ConditionalRegister, TwoRegister)
    Branch(RegisterAndLink, TwoRegister)
    Branch(ImmediateAndLink, OneRegisterU16)
    Branch(ConditionalRegisterAndLink, ThreeRegister)
    Branch(Select, ThreeRegister)
#undef Branch
EndKind(Branch)
BeginKind(Compare)
#define Compare(op, Format) X(Compare, op, Format)
#define NormalCompare(op) Compare(op, ThreeRegister)
#define NormalSignedCompare(op) NormalCompare(op ## Signed)
#define NormalUnsignedCompare(op) NormalCompare(op ## Unsigned)
#define NormalSignedUnsignedCompare(op) \
        NormalSignedCompare(op) \
        NormalUnsignedCompare(op)
    NormalCompare(Equals)
    NormalCompare(NotEquals)
    NormalSignedUnsignedCompare(LessThan)
    NormalSignedUnsignedCompare(GreaterThan)
    NormalSignedUnsignedCompare(LessThanOrEqualTo)
    NormalSignedUnsignedCompare(GreaterThanOrEqualTo)
    //NormalSignedUnsignedCompare(Spaceship)
#undef NormalSignedCompare
#undef NormalUnsignedCompare 
#undef NormalCompare
#undef NormalSignedUnsignedCompare
#define RawImm8Compare(op, Format) Compare(op ## Immediate8, Format)
#define Imm8Compare(op) RawImm8Compare(op, TwoRegisterU8)
#define Imm8SignedCompare(op) RawImm8Compare(op ## Signed , TwoRegisterS8)
#define Imm8UnsignedCompare(op) Imm8Compare(op ## Unsigned)
#define Imm8SignedUnsignedCompare(op) \
        Imm8SignedCompare(op) \
        Imm8UnsignedCompare(op)
    Imm8Compare(Equals)
    Imm8Compare(NotEquals)
    Imm8SignedUnsignedCompare(LessThan)
    Imm8SignedUnsignedCompare(GreaterThan)
    Imm8SignedUnsignedCompare(LessThanOrEqualTo)
    Imm8SignedUnsignedCompare(GreaterThanOrEqualTo)
    //Imm8SignedUnsignedCompare(Spaceship)
#undef Imm8SignedUnsignedCompare
#undef RawImm8Compare
#undef Imm8Compare
#undef Imm8SignedCompare
#undef Imm8UnsignedCompare

#undef Compare
EndKind(Compare)
